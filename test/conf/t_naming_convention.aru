-- Rules in String_Matching_Gnat syntax:
Too_short : check naming_convention (all, "....");
Title_Case: check naming_convention (variable, case_sensitive "^[A-Z][a-z0-9]*(_[A-Z0-9][a-z0-9]*)*$");
Standard  : check naming_convention (all, not "integer");
Types     : check naming_convention (type, "^T_", "_T$");
Enum_T    : check naming_convention (Enumeration_Type, "_enum$");
Tasks     : check naming_convention (task_type, "_task$");
Generics  : check naming_convention (generic, "_Gen$");
Procs     : check naming_convention (procedure, not "_Gen$");
Const1    : check naming_convention (root constant, "^C_");
Const2    : Check naming_convention (constant, "^Const_");
Enums     : check naming_convention (root Enumeration, "^Enum_");
Label     : check naming_convention (label, not "_");
Loop      : check naming_convention (loop_name, "^G_");
Stmt      : check naming_convention (stmt_name, not "ock$");
Protect   : check naming_convention (protected_procedure, "^protec_");
Protec_F  : check naming_convention (protected_field, "^pf_");
Task_E    : check naming_convention (task_entry, "^task_");
Rec_F     : check naming_convention (Record_field, "^rf_");
Discr     : check naming_convention (Discriminant, "^D_");
Modular   : check naming_convention (Modular_Integer_Type, "_mod$");
Private   : check naming_convention (private_type, "^priv_");
Tagged    : check naming_convention (Tagged_Type, "_tagged$");
Class     : check naming_convention (Class_type, "_class$");
Access    : check naming_convention (Access_Type, "_access_");
Access_R  : check naming_convention (Access_to_regular_type, "_regular$");
Access_T  : check naming_convention (Access_to_tagged_type, "_tagged$");
Access_C  : check naming_convention (Access_to_class_type, "_class$");
Access_SP : check naming_convention (Access_to_sp_type, "_sp$");
access_Ta : check naming_convention (access_to_task_type, "_task$");

Global_Only : check naming_convention (global all, not "^l_");
Local_Only  : check naming_convention (local  all, not "^g_");

-- Rules given in String_Matching_Portable syntax:
-- Too_short: check naming_convention (all, "????*");
-- Standard  : check naming_convention (all, not integer);
-- Types     : check naming_convention (type, "T_*", "*_T");
-- Enum_T    : check_naming_convention (Enumerated_Type, "*_enum");
-- Generics  : check naming_convention (generic, "*_Gen");
-- Procs     : check naming_convention (procedure, not "*_Gen");
-- Const1    : check naming_convention (root constant, "C_*");
-- Const2    : Check naming_convention (constant, "Const_*");
-- Enums     : check naming_convention (root Enumeration, "Enum_*");
-- Label     : check naming_convention (label, not "*_*");
-- Loop      : check naming_convention (loop_name, "G_*");
-- Stmt      : check naming_convention (stmt_name, not "*ock");
-- Protect   : check naming_convention (protected_procedure, "protec_*");
-- Protec_F  : check naming_convention (protected_field, "pf_*");
-- Task_E    : check naming_convention (task_entry, "task_*");
-- Rec_F     : check naming_convention (Record_field, "rf_*");
-- Discr     : check naming_convention (Discriminant, "D_*");
-- Modular   : check naming_convention (Modular_Integer_Type, "*_mod");
-- Private   : check naming_convention (private_type, "priv_*");
-- Tagged    : check naming_convention (Tagged_Type, "*_tagged");
-- Class     : check naming_convention (Class_type, "*_class");
-- Access    : check naming_convention (Access_Type, "*_access_*");
-- Access_R  : check naming_convention (Access_to_regular_type, "*_regular");
-- Access_T  : check naming_convention (Access_to_tagged_type, "*_tagged");
-- Access_C  : check naming_convention (Access_to_regular_type, "*_class");
-- Access_SP : check naming_convention (Access_to_sp_type, "*_sp");
-- access_Ta : check naming_convention (access_to_task_type, "*_task");
-- Global_Only : check naming_convention (all, global not "l_*");
-- Local_Only  : check naming_convention (all, local  not "g_*");

